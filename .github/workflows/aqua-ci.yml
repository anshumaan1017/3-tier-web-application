name: Aqua-Scan

on: 
  pull_request:
  push:
    branches:
      - main

jobs:
  aqua-misconfiguration-scan:
    name: Aqua scanner
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
      actions: read
      security-events: write 

    steps: 
        
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Aqua scanner
        uses: docker://aquasec/aqua-scanner
        with:
          args: trivy fs --scanners misconfig,vuln,secret --sast --reachability .
          # To customize which severities to scan for, add the following flag: --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          # To enable SAST scanning, add: --sast
          # To enable reachability scanning, add: --reachability
          # To enable npm/dotnet/gradle non-lock file scanning, add: --package-json / --dotnet-proj / --gradle
        env:
          AQUA_KEY: ${{ secrets.AQUA_KEY }}
          AQUA_SECRET: ${{ secrets.AQUA_SECRET }}
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
          AQUA_URL: https://api.asia-1.supply-chain.cloud.aquasec.com
          CSPM_URL: https://asia-1.api.cloudsploit.com
          TRIVY_RUN_AS_PLUGIN: 'aqua'
          # For http/https proxy configuration add env vars: HTTP_PROXY/HTTPS_PROXY, CA-CRET (path to CA certificate)

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: aqua-sast-results
          path: aqua-sscs-results.json
          

  docker-build-scan: 
    name: Docker Build and Push
    runs-on: ubuntu-latest
    permissions:
      contents: read 
      id-token: write
      packages: write
      actions: read
      security-events: write

   #needs: [aqua-misconfiguration-scan]
    env:
      DOCKER_REPOSITORY: ${{ secrets.DOCKERHUB_USERNAME }} # name of Docker Hub Org ID
      IMAGE_NAME: 3-tier-web-application
      IMAGE_TAG: ${{ github.run_number }} 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Pipeline Enforcer
      #   uses: aquasecurity/pipeline-enforcer-action@v1.0.0
      #   with:
      #     aqua-key: ${{ secrets.AQUA_KEY }}
      #     aqua-secret: ${{ secrets.AQUA_SECRET }}
      #     access-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_REPOSITORY}}/${{ env.IMAGE_NAME}}:${{ env.IMAGE_TAG}}

      - name: Prisma Cloud image scan - nonprod
        uses: PaloAltoNetworks/prisma-cloud-scan@v1.6.4
        with:
          pcc_console_url: https://asia-south1.cloud.twistlock.com/india-1131963775
          pcc_user: ${{ secrets.pcc_user }}
          pcc_pass: ${{ secrets.pcc_pass }}
          image_name: ${{ env.DOCKER_REPOSITORY}}/${{ env.IMAGE_NAME}}:${{ env.IMAGE_TAG}} 

      - name: Login to Aqua Registry
        uses: docker/login-action@v3
        with: 
          registry: registry.aquasec.com
          username: ${{ secrets.AQUA_REGISTRY_USERNAME }}
          password: ${{ secrets.AQUA_REGISTRY_PASS }}
          
      - name: Image Scan with Aqua SaaS Scanner 
        run: |  
          docker run -e env=uat \
            --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/scan-output \
            registry.aquasec.com/scanner:2502.7.14 scan \
            --host ${{ secrets.AQUA_HOST }} \
            --token ${{ secrets.AQUA_TOKEN }} \
            --local ${{ env.DOCKER_REPOSITORY}}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --sariffile /scan-output/image-results.sarif \
            --htmlfile /scan-output/image-results.html \
            --layer-vulnerabilities 
            # --scan-malware \
            # --collect-sensitive \
            # --show-negligible \
            # --show-will-not-fix \
            # --no-verify \
            # --verbose-errors

      - name: Upload SARIF report
        if: ${{ always() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: image-results.sarif
 
      - name: Upload HTML report
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: aqua-image-scan-results
          path: image-results.html


      - name: Manifest Generation
        run: |
          export BILLY_SERVER=https://billy.asia-1.codesec.aquasec.com
          curl -sLo install.sh download.codesec.aquasec.com/billy/install.sh
          curl -sLo install.sh.checksum https://github.com/argonsecurity/releases/releases/latest/download/install.sh.checksum
          if ! cat install.sh.checksum | sha256sum --check; then
          echo "install.sh checksum failed"
          exit 1
          fi
          BINDIR="." sh install.sh
          rm install.sh install.sh.checksum
          ./billy generate \
            --access-token "${{ secrets.GHCR_TOKEN }}" \
            --aqua-key "${{ secrets.AQUA_KEY }}" \
            --aqua-secret "${{ secrets.AQUA_SECRET }}" \
            --cspm-url https://asia-1.api.cloudsploit.com \
            --artifact-path "${{ env.DOCKER_REPOSITORY}}/${{ env.IMAGE_NAME}}:${{ env.IMAGE_TAG}}" 

            # The docker image name:tag of the newly built image
            # --artifact-path "my-image-name:${{ env.tag-version }}" 
            # OR the path to the root folder of your project. I.e my-repo/my-app 
            # --artifact-path "${{env.MY_APP_ROOT}}"
            # --artifact-path "${{ env.DOCKER_REPOSITORY}}/${{ env.IMAGE_NAME}}:${{ env.IMAGE_TAG}}"
